#genera fichero c con regla de logica temporal
spin -a -f '<>(Producer@cs && Consumer@cs)' producers_consumers.pml
#compila fichero c
gcc -o pan pan.c
#ejecutas y ves que aparece errors = 1
./pan

#ejecutas spin con función -t para que coja el fichero .trail con el escenario
#donde hay error, y te muestra todos los pasos con la función -p
spin -t -p producers_consumers.pml



#PARA HACER EN LATEX

#Para hacerlo con numero de proceso
spin -a -f '<>(Consumer[0]@cs && Consumer[1]@cs)' producers_consumers.pml
#
#esto detecta si se incumple mutual exclusion
#para tamaño de buffer 0 , no existe mutual exclusion, puesto que ninguno crea ni consume nada, no entran en zona crítica
#para consumer = 1 y producer = 0 o viceversa, tampoco, solo hay un proceso corriendo al mismo tiempo
#en el resto de escenarios, hay exclusión mútua

#Para detectar deadlock:

spin -a producers_consumers.pml
gcc -o pan pan.c 
./pan

#para detectar starvation
spin -a -f '![]<>(Producer@cs)' producers_consumers.pml
gcc -o pan pan.c
./pan -a
#Para N = 0 encuentra starvation
#Para Producer = Consumer = 1 no encuentra, se turnan
#Para Producer >1 o Consumer > 1 hay starvation
